Description: >
   Andre Vieira Silva
     Server template - Project 2 - Udacity DevOps Engineer Nanodegree

Parameters:
    EnvironmentName:
        Description: An environment name to prefixe resource names
        Type: String
    AMItoUse:
        Description: AMI to use for our base image
        Type: String

Resources:
    #secutiry
    # role to S3
    S3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                    Action:
                    - sts:AssumeRole
            Path: "/"

    #Policy for S3 Role
    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: S3ReadOnlyAccess
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:Get*
                          - s3:List*
                      Resource:
                          - arn:aws:s3:::devops-engineer-nanodegree-project-2
                          - arn:aws:s3:::devops-engineer-nanodegree-project-2/*
            Roles:
                - Ref: S3ReadOnlyEC2

    # EC2 Instance Profile
    ServerInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Roles:
                - !Ref S3ReadOnlyEC2

    #SG for LB - only traffic on port 80
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http traffic to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    #SG - EC2 instances
    WebSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref SSHLocation
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    #Auto-scale group template
    AppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://devops-engineer-nanodegree-project-2/sample.zip .
                    unzip -o sample.zip
            ImageId: !Ref AMItoUse
            IamInstanceProfile: !Ref ServerInstanceProfile
            SecurityGroups:
            - Ref: WebSG
            InstanceType: t3.medium
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: '10'

    #LB - targetGroup
    AppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC

    #Auto-scale group definition
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
            LaunchConfigurationName:
                Ref: AppLaunchConfig
            MinSize: '4'
            MaxSize: '6'
            TargetGroupARNs:
                - Ref: AppTargetGroup

    #LB
    AppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
                - Ref: LoadBalancerSecGroup
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2

    #LB - listener
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: AppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref 'AppTargetGroup'
            Conditions:
                - Field: path-pattern
                  Values: [ / ]
            ListenerArn: !Ref 'Listener'
            Priority: 1